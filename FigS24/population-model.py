"""Simulates model described in SI sec 3.2.10 and generates Fig. S23"""import numpy as npfrom matplotlib import pylab as pltimport randomavg_time_of_loss = 129.26p = 1 - np.exp(-49.4/129.26)  #Probability of prion lossN_divs = 11 #Number of divisionsN_cells_final_big = []N_cells_final_small = []N_sims = 1000#Big aggregate:for div in range(N_divs):    N_cells = np.ones(N_sims)    for k in range(N_sims):        for i in range(div):            for j in range(int(N_cells[k]) - 1): #Go through each small aggregate                random_number = random.random()                if random_number > p: #Aggregate is not lost                    N_cells[k] = N_cells[k] + 1            N_cells[k] = N_cells[k] + 1 # Big aggregate always produces small aggregate    N_cells_final_big.append(np.average(N_cells))        #Small aggregate:for div in range(N_divs):    N_cells = np.ones(N_sims)    for k in range(N_sims):        for i in range(div):            for j in range(int(N_cells[k]) ): #Go through each small aggregate                random_number = random.random()                if random_number > p: #Aggregate is not lost                    N_cells[k] = N_cells[k] + 1            #N_cells[k] = N_cells[k] + 1 # Big aggregate always produces small aggregate    N_cells_final_small.append(np.average(N_cells))            plt.figure()plt.plot(N_cells_final_big, label = 'Colony from single old pole aggregate cell')plt.plot(N_cells_final_small,  label = 'Colony from single small pole aggregate cell')plt.xlabel('Number of divisions', fontsize = 17)plt.ylabel('Mean number of cells' + '\n' +'with aggregates', fontsize = 17)plt.xticks(fontsize = 14)plt.yticks(fontsize = 14)plt.legend()plt.tight_layout()plt.savefig('population-number.pdf')    N_all_cells = np.ones(N_divs )for i in range(N_divs ):    N_all_cells[i] = 2**i    plt.figure()plt.plot(N_cells_final_big/N_all_cells, label = 'Colony from single old pole aggregate cell')plt.plot(N_cells_final_small/N_all_cells,  label = 'Colony from single small pole aggregate cell')plt.xlabel('Number of divisions', fontsize = 17)plt.ylabel('Mean fraction of population' + '\n' +'with aggregates', fontsize = 17)plt.xticks(fontsize = 14)plt.yticks(fontsize = 14)plt.legend()plt.tight_layout()plt.savefig('population-fraction.pdf')    